
<flowSequence xmlns="http://dynamo.documill.com/schemas/flow"
              xmlns:cc="http://dynamo.documill.com/schemas/taglib/core/conditional"
              xmlns:cl="http://dynamo.documill.com/schemas/taglib/core/loop"
              xmlns:cv="http://dynamo.documill.com/schemas/taglib/core/var"
              xmlns:dbg="http://dynamo.documill.com/schemas/taglib/debug"
              xmlns:ddoc="http://dynamo.documill.com/schemas/taglib/dynamodoc"
              xmlns:dt="http://dynamo.documill.com/schemas/taglib/date"
              xmlns:fl="http://dynamo.documill.com/schemas/taglib/core/flow"
              xmlns:fo="http://dynamo.documill.com/schemas/taglib/format"
              xmlns:fs="http://dynamo.documill.com/schemas/taglib/formselect"
              xmlns:htmlex="http://dynamo.documill.com/schemas/taglib/html/external"
              xmlns:pdf="http://dynamo.documill.com/schemas/taglib/pdf"
              xmlns:sfch="http://dynamo.documill.com/schemas/taglib/salesforce/chatter"
              xmlns:sfcrud="http://dynamo.documill.com/schemas/taglib/salesforce/crud"
              xmlns:sfem="http://dynamo.documill.com/schemas/taglib/salesforce/email"
              xmlns:sff="http://dynamo.documill.com/schemas/taglib/salesforce/fields"
              xmlns:sffile="http://dynamo.documill.com/schemas/taglib/salesforce/file"
              xmlns:soql="http://dynamo.documill.com/schemas/taglib/salesforce/soql"
              xmlns:wizard="http://dynamo.documill.com/schemas/taglib/wizard"
              xmlns:xlsxd="http://dynamo.documill.com/schemas/taglib/xlsxdata"
              xmlns:es="http://dynamo.documill.com/schemas/taglib/esignature"
              xmlns:dex="http://dynamo.documill.com/schemas/taglib/docx/external"
              xmlns:sfpub="http://dynamo.documill.com/schemas/taglib/salesforce/publish"
              xmlns:pdfsig="http://dynamo.documill.com/schemas/taglib/pdf/signature"
              id="compose"
              name="Compose Flow"
              endMessage="Going back to previous screen...">
  <startFlow id="Start">
    <events>
      <defaultEvent step="Start" />
    </events>
    <steps>
      <step id="Start" name="Start" onError="System error">
        <logic>
          <!-- Main id -->
          <cv:set value="" var="id" />
          <cv:set value="${param.id}" var="id" />
          <cc:if test="${empty id}">
            <fl:error message="Id prameter not defined" />
          </cc:if>
          <!-- Template id -->
          <cv:set var="templateId" value="" hideFromDataTab="true" />
          <cv:set var="templateId" value="${param.templateId}" hideFromDataTab="true" />
          <cc:if test="${empty templateId}">
            <fl:error message="Template ID is empty. Save template before doing test run." />
          </cc:if>
          <!-- Common subtemplate -->
          <cv:set var="dynamoCommonEngage" />
          <cc:if test="${not empty param.dynamoCommonEngage}">
            <sffile:load var="dynamoCommonEngage" recordId="${param.dynamoCommonEngage}" />
          </cc:if>
          <cv:set var="dynDocId" value="" />
          <cv:set var="postID" value="" hideFromDataTab="true" />
          <cv:set var="viewMode" value="" hideFromDataTab="true" />
          <cv:set var="conf" value="" hideFromDataTab="true" />
          <cv:set var="dynDocStatus" value="" />
          <cv:set var="dynDocName" value="" />
          <cv:set var="documentOptions" value="" hideFromDataTab="true" />
          <cv:set var="versionNumber" value="" />
          <cv:set var="versionNumberSaved" value="" />
          <cv:set var="fullPDF" value="" hideFromDataTab="true" />
          <cv:set var="composedDoc" value="${&apos;&apos;}" hideFromDataTab="true" />
          <cv:setBoolean var="approvalRequired" value="false" />
          <cv:set var="approverId" value="" />
          <cv:set var="approvers" value="" />
          <cv:set var="publishURL" value="" />
          <cv:set var="headings" />
          <cv:set var="saveMessage" value="" />
          <cv:set var="saveTime" value="" />
          <cv:set var="useClausePane" value="" />
          <cv:set var="externalFeed" value="${&apos;&apos;}" />
          <cv:set var="documentTemplateName" value="Document" />
          <cv:set var="prevDoc" value="${&apos;&apos;}" hideFromDataTab="true" />
          <cv:set var="prevVersion" value="" />
          <cv:set var="debugVersions" value="false" />
          <dt:setDate var="today" />
          <!-- Use only other/pre existing PDF files -->
          <cv:setBoolean var="otherPdf" value="false" />
          <!-- Formats -->
          <fo:setBooleanFormat />
          <fo:setCurrencyFormat pattern="" />
          <fo:setDateFormat pattern="" />
          <fo:setDateTimeFormat pattern="" />
          <fo:setNumberFormat />
          <fo:setPercentageFormat />
          <fo:setDateTimeFormat pattern="HH:mm" name="justTime" />
          <!-- Remove this? -->
          <cv:set var="fileName" value="" hideFromDataTab="true" />
          <cc:choose>
            <cc:when test="${param.eventID == &apos;new&apos;}">
              <fl:next label="New" step="New" />
            </cc:when>
            <cc:when test="${param.eventID == &apos;open&apos;}">
              <fl:next label="Open" step="Open" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="List" label="List" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="New" name="New" onError="System error">
        <logic>
          <!-- Can start with eventID=list -->
          <cv:addMapEntry key="eventID" value="new" map="${param}" />
          <!-- Will be updated after main object query -->
          <cv:set var="dynDocName" value="Dynamo Document" />
          <cv:set var="dynDocStatus" value="Draft" />
          <cv:setMap var="conf" />
          <cv:addMapEntry key="versionNumber" map="${conf}" value="${0}" />
          <cv:toJSON value="${conf}" var="confJSON" />
          <cc:choose>
            <cc:when test="${not empty param.testDynDocId}">
              <dbg:log level="WARNING" message="Test mode: Using existing dynamo document" />
              <fl:next step="Reset for testing" />
            </cc:when>
            <cc:otherwise>
              <sfcrud:create type="dynamo__Dynamo_Document__c" var="dynDocId">
                <sfcrud:field name="Name" value="${dynDocName}" />
                <cc:if test="${id.startsWith(&apos;006&apos;)}">
                  <sfcrud:field name="dynamo__Opportunity__c" value="${id}" />
                </cc:if>
                <sfcrud:field name="dynamo__Parent_Record_ID__c" value="${id}" />
                <sfcrud:field name="dynamo__Template_ID__c" value="${templateId}" />
                <sfcrud:field name="dynamo__Document_Status__c" value="${dynDocStatus}" />
                <sfcrud:field name="dynamo__Configuration_JSON__c" value="${confJSON}" />
              </sfcrud:create>
              <fl:next step="Query document" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Open" name="Open" onError="System error">
        <logic>
          <cc:if test="${not empty param.button}">
            <cv:set var="id" value="${param.button}" />
          </cc:if>
          <cc:choose>
            <cc:when test="${not empty param.testDynDocId}">
              <dbg:log level="WARNING" message="Test mode: Using existing dynamo document" />
              <cv:set value="${param.testDynDocId}" var="dynDocId" />
              <cv:set value="" var="id" />
            </cc:when>
            <cc:otherwise>
              <cv:set value="${id}" var="dynDocId" />
              <cv:set value="" var="id" />
            </cc:otherwise>
          </cc:choose>
          <cv:set var="postID" value="${param.extra}" />
          <fl:next label="init" step="Query document" />
        </logic>
      </step>
      <step id="Query document" name="Query document" onError="System error">
        <logic>
          <sff:record var="dynDoc" type="dynamo__Dynamo_Document__c" recordID="${dynDocId}" fields="dynamo__Locked__c, dynamo__Last_Editor__r.Name, dynamo__Next_User__r.Id, dynamo__Next_User__r.Name, dynamo__Document_Status__c, dynamo__Publication_URL__c, Id, Name, dynamo__Configuration_JSON__c, dynamo__Parent_Record_ID__c, Owner.Name, Owner.Id, dynamo__Publication_Date__c, dynamo__Publication_Expires__c" hideFromDataTab="true" />
          <cv:set var="id" value="${dynDoc.dynamo__Parent_Record_ID__c}" />
          <cc:if test="${empty id}">
            <fl:error message="Parent object record ID is empty (dynamo__Parent_Record_ID__c=null)" />
          </cc:if>
          <cv:set var="loadedDocName" value="${dynDoc.Name}" />
          <cv:set var="dynDocName" value="${dynDoc.Name}" />
          <cv:parseJSON value="${dynDoc.dynamo__Configuration_JSON__c}" var="conf" />
          <cv:set var="approverId" value="${dynDoc.dynamo__Next_User__r.Id}" />
          <cv:set var="publishURL" value="${dynDoc.dynamo__Publication_URL__c}" />
          <cv:set var="publicationDate" value="${dynDoc.dynamo__Publication_Date__c}" />
          <cv:set var="publicationExpires" value="${dynDoc.dynamo__Publication_Expires__c}" />
          <cv:set value="${dynDoc.dynamo__Document_Status__c}" var="dynDocStatus" />
          <cv:set var="versionNumberSaved" value="${conf.versionNumber}" />
          <cv:set var="versionNumber" value="${conf.versionNumber}" />
          <cc:if test="${empty postID}">
            <fl:setEndURL value="${sfdcServer}/lightning/r/${id}/view" />
          </cc:if>
          <fl:next step="Settings" />
        </logic>
      </step>
      <step id="Settings" name="Settings">
        <logic>
          <!-- Common template -->
          <cc:choose>
            <cc:when test="${not empty dynamoCommonEngage}" />
            <cc:otherwise>
              <cv:set var="dynamoCommonEngage" value="dynamoCommon-engage-v3" />
            </cc:otherwise>
          </cc:choose>
          <!-- Settings -->
          <cv:buildMap var="dynSettings" ordered="true" id="dynSettings">
            <cv:buildMap var="document" label="Document Outcome" descVisible="true" desc="Defines document name and language.">
              <cv:buildMap var="name" label="Document name" desc="Document record name. Used also to give name to the final document file.">
                <cv:set var="nameStart" value="Document" expressionType="static" label="Name starts" desc="Beginning of document name like &apos;Offer for &apos;." />
                <cv:set var="nameEnd"
                        label="Name ends"
                        expressionType="static"
                        desc="End of document name expression like &apos;account.name&apos;."
                        value=""
                        valueEditor="el" />
              </cv:buildMap>
              <cv:set var="language"
                      value="documentLanguage"
                      expressionType="static"
                      label="Language"
                      descVisible="false"
                      desc="Expression to define translation matrix language."
                      valueEditor="el" />
            </cv:buildMap>
            <cv:buildMap var="userView" label="Document View" descVisible="true" desc="Defines document view user interface buttons and displays.">
              <cv:setBoolean var="compare"
                             value="false"
                             expressionType="static"
                             label="Compare versions"
                             descVisible="false"
                             desc="Option to compare versions to see what changes have been made to the document." />
              <cv:setBoolean var="report"
                             value="true"
                             expressionType="static"
                             label="Activity report"
                             descVisible="false"
                             desc="Option to view tracking status of who has edited, commented, approved or rejected the document." />
              <cv:setBoolean var="pdf"
                             value="true"
                             expressionType="static"
                             label="PDF Preview"
                             descVisible="false"
                             desc="Option to preview the document in PDF." />
              <cv:setBoolean var="comments"
                             value="false"
                             expressionType="static"
                             label="Comments"
                             descVisible="false"
                             desc="Show internal document comments section." />
              <cv:setBoolean var="refresh"
                             value="true"
                             expressionType="static"
                             label="Refresh data"
                             descVisible="false"
                             desc="Option to update data in real-time if Salesforce record has changed during viewing." />
            </cv:buildMap>
            <cv:buildMap var="edit" label="Edit" descVisible="true" desc="Choose how end users can edit the editable areas given in the template and define editor tools.">
              <cv:setBoolean var="enabled"
                             value="true"
                             expressionType="static"
                             label="Enabled"
                             descVisible="false"
                             desc="Enable document editing and show edit button in document view if template contains editable areas." />
              <cv:setBoolean var="showClauses"
                             value="true"
                             expressionType="static"
                             label="Clause select"
                             descVisible="false"
                             desc="Show ready-made text blocks from Documill Dynamo Clauses for drag-n-drop into the editable areas." />
              <cv:buildMap var="editorSettings" label="Editor tools" descVisible="false" desc="Defines editor tools and features.">
                <cv:set var="contenteditable_editor"
                        expressionType="static"
                        value=""
                        label="Formatting Buttons"
                        descVisible="false"
                        desc="List of editor toolbar features/buttons." />
                <cv:setBoolean var="contenteditable_nativespellcheck"
                               expressionType="static"
                               value="true"
                               label="Native spellcheck"
                               descVisible="false"
                               desc="Enable browser native spellcheck." />
                <cv:setBoolean var="contenteditable_filterpaste"
                               expressionType="static"
                               value="true"
                               label="Paste filter"
                               descVisible="false"
                               desc="Clear all formating of the copied texts when user paste to the editable areas. The texts then will take the template layout." />
              </cv:buildMap>
            </cv:buildMap>
            <cv:buildMap var="approval" label="Internal Approval" descVisible="true" desc="Defines internal approval criteria and approvers.">
              <cv:set var="criteria"
                      value=""
                      expressionType="static"
                      label="Criteria"
                      descVisible="false"
                      desc="Approval criteria expression like: dynDocStatus == &apos;Draft&apos;"
                      valueEditor="condition" />
              <cv:set var="criteriaInfo"
                      value=""
                      expressionType="static"
                      label="Criteria Info"
                      descVisible="false"
                      desc="Approval criteria info is free text displayed to user when approval is needed." />
              <cv:setBoolean var="allowWithdraw"
                             value="true"
                             expressionType="static"
                             label="Withdraw"
                             descVisible="false"
                             desc="Enables author to withdraw document that is waiting for approval." />
              <cv:setBoolean var="allowApproverEdit"
                             value="false"
                             expressionType="static"
                             label="Approver edit"
                             descVisible="false"
                             desc="Enable approver to edit the document when document is in waiting for approval status." />
              <cv:setBoolean var="allowChangeToDraft"
                             value="true"
                             expressionType="static"
                             label="Change to draft"
                             descVisible="false"
                             desc="Enables to change approved or rejected status to draft." />
              <cv:buildMap var="approvers" subcategory="true" label="Approvers" descVisible="true" desc="List of user groups and users that can approve the document.">
                <cv:buildCollection var="groups" itemType="approverGroupType" label="Groups" descVisible="false" desc="List of public groups that can approve the document." />
                <cv:buildCollection var="users" itemType="approverUserType" label="Users" descVisible="false" desc="List of users that can approve the document." />
              </cv:buildMap>
            </cv:buildMap>
            <cv:buildMap var="share" label="Share" descVisible="true" desc="Defines document share type and features.">
              <cv:setBoolean var="enabled"
                             value="true"
                             expressionType="static"
                             label="Enabled"
                             descVisible="false"
                             desc="Enable share feature and show share button in document view." />
              <cv:setBoolean var="useApproval"
                             value="false"
                             expressionType="static"
                             label="Use approval"
                             descVisible="false"
                             desc="Defines if external commenting and approval is part of the share workflow." />
              <cv:setBoolean var="useSign"
                             value="true"
                             expressionType="static"
                             label="Use signing"
                             descVisible="false"
                             desc="Defines if e-signing is part of the share workflow." />
              <cv:setBoolean var="manualShareType"
                             value="false"
                             expressionType="static"
                             label="Can change share type"
                             descVisible="false"
                             desc="Defines if end user can change and select share type." />
              <cv:setBoolean var="manualSelect"
                             value="true"
                             expressionType="static"
                             label="Can select contacts"
                             descVisible="false"
                             desc="Defines if end user can select or change approver and/or signers." />
              <cv:setBoolean var="editEmail" value="true" expressionType="static" label="Edit email" desc="If on user can edit email." />
              <cv:set var="senderUserId"
                      value=""
                      expressionType="static"
                      label="Sender"
                      descVisible="false"
                      desc="Sender user ID expression like &apos;UserInfo.userId&apos;. This user will get email notifications. If not defined current user is used." />
              <cv:set var="orgWideEmail"
                      value=""
                      expressionType="static"
                      label="Org wide email"
                      descVisible="false"
                      desc="Organization wide email address display name or address." />
              <cv:setBoolean var="bccSender"
                             value="false"
                             expressionType="static"
                             label="Bcc sender"
                             descVisible="false"
                             desc="If enabled, current user email is added as email bcc." />
              <cv:setNumber var="validDays"
                            value="60"
                            expressionType="static"
                            label="Valid days"
                            descVisible="false"
                            desc="How long share link is valid (in days)" />
              <cv:setBoolean var="allowWithdraw"
                             value="true"
                             expressionType="static"
                             label="Withdraw"
                             descVisible="false"
                             desc="Defines if user can withdraw/disable share link" />
              <cv:buildMap var="ui" subcategory="true" label="Share UI" descVisible="true" desc="Defines Share UI features. Share UI is the user interface for external user.">
                <cv:setBoolean var="navigation"
                               value="true"
                               expressionType="static"
                               label="Navigation"
                               descVisible="false"
                               desc="Defines if navigation panel is part of the share UI." />
                <cv:set var="endURL"
                        value="https://documill.com/dynamo"
                        expressionType="static"
                        label="End URL"
                        descVisible="false"
                        desc="URL to show when user exits the share view." />
              </cv:buildMap>
            </cv:buildMap>
            <cv:buildMap var="externalApproval" label="External Approval" descVisible="true" desc="External review phase enables to share document for commenting and approval (external contacts).">
              <cv:set var="shareEmail"
                      value="Share/content.html"
                      expressionType="static"
                      label="Share email"
                      descVisible="false"
                      desc="Email template used to send review request."
                      valueEditor="email" />
              <cv:set var="reshareEmail"
                      value="Re-share/content.html"
                      expressionType="static"
                      label="Re-share email"
                      descVisible="false"
                      desc="Email template used to send review request for new version."
                      valueEditor="email" />
              <cv:setBoolean var="chatterFeed"
                             value="true"
                             expressionType="static"
                             label="Chatter feed"
                             descVisible="false"
                             desc="Show Chatter feed for internal comments." />
              <cv:setBoolean var="canChangeSigner"
                             value="false"
                             expressionType="static"
                             label="Can change signer"
                             descVisible="false"
                             desc="If on external approver can change first signer during approval." />
              <cv:buildMap var="extApprover" label="External approver" descVisible="false" desc="External approver (Contact).">
                <cv:set var="name"
                        value=""
                        expressionType="static"
                        label="Approver name"
                        descVisible="false"
                        desc="Approver contact full name." />
                <cv:set var="id"
                        value=""
                        expressionType="static"
                        label="Approver ID"
                        descVisible="false"
                        desc="Approver Contact record ID or expression for getting the ID."
                        valueEditor="el" />
              </cv:buildMap>
              <cv:buildMap var="collectData" subcategory="true" label="Additional questions" descVisible="true" desc="List of additional questions presented to contact after approval.">
                <cv:setBoolean var="enabled" label="Enabled" value="false" desc="If enabled questions are presented to contact (otherwise not)" />
                <cv:set var="intro" label="Introduction" value="" desc="Introduction text before questions." />
                <cv:buildCollection var="inputs" itemType="inputType" label="Questions" descVisible="false" desc="List of additional questions." />
              </cv:buildMap>
            </cv:buildMap>
            <cv:buildMap var="sign" subcategory="true" label="Signing" descVisible="true" desc="Defines e-signing related settings and pre-selected signers. These settings are used if signing is part of the share workflow.">
              <cv:set var="signRequestEmail"
                      value="Sign request/content.html"
                      expressionType="static"
                      label="Sign request email"
                      descVisible="false"
                      desc="Defines sign request email template."
                      valueEditor="email" />
              <cv:setBoolean var="requireScribble" label="Require singature scribble" value="false" desc="If on signature scribble is required." />
              <cv:buildMap var="record" label="Signed PDF" descVisible="false" desc="Defines signed PDF host record ID and file name.">
                <cv:set var="id" value="" expressionType="static" label="ID" desc="Defines record ID expression like &apos;id&apos;. Signed PDF will be related to this record. If not defined &apos;id&apos; is used." />
                <cv:set var="fileName" value="" expressionType="static" label="File name" desc="Defines file name expression like &apos;dynDocName&apos;. If not defined &apos;dynDocName&apos; is used." />
              </cv:buildMap>
              <cv:buildCollection var="extSigners" itemType="extSignerType" label="Preselected external signers" descVisible="false" desc="List of preselected external signers (contacts) in signing order." />
              <cv:buildMap var="intSignerGroup" label="Internal signers group" descVisible="false" desc="Group defines list of users where from internal signer could be selected.">
                <cv:set var="id"
                        value=""
                        valueEditor="el"
                        expressionType="static"
                        label="Group ID"
                        desc="Group ID (record ID). If group ID and group name are both defined, ID takes preference." />
                <cv:set var="name"
                        value=""
                        label="Group name (label)"
                        editor="sfGroup"
                        editorGroupValue="label"
                        desc="Group name (label). If group name and group ID are both defined, ID takes preference." />
              </cv:buildMap>
              <cv:buildCollection var="intSigners" itemType="intSignerType" label="Preselected internal signers" descVisible="false" desc="List of preselected internal signers (users) in signing order." />
            </cv:buildMap>
            <cv:buildMap var="email" label="Email" descVisible="true" desc="Defines email sending related settings and values.">
              <cv:setBoolean var="enabled"
                             value="false"
                             expressionType="static"
                             label="Enabled"
                             descVisible="false"
                             desc="Is email sending enabled." />
              <cv:set var="template"
                      value="With attachment/content.html"
                      expressionType="static"
                      label="Email template"
                      descVisible="false"
                      desc="Defiens template used to compose email content."
                      valueEditor="email" />
              <cv:set var="relatedTo"
                      value="id"
                      expressionType="static"
                      label="Email save relation"
                      descVisible="false"
                      desc="Defines record where email message shoud be saved. If not given email is not saved just sent. Value must be expression for record id like &apos;id&apos;."
                      valueEditor="el" />
              <cv:set var="orgWideEmail"
                      value=""
                      expressionType="static"
                      label="Org wide email address"
                      descVisible="false"
                      desc="Organization wide email address display name or address. If given sender is not user itself. Org wide email address must be registered in Salesforce." />
              <cv:buildMap var="subject" subcategory="true" label="Subject" descVisible="true" desc="Defines email subject.">
                <cv:set var="value"
                        value="dynDocName"
                        expressionType="static"
                        label="Email subject"
                        descVisible="false"
                        desc="Defines email subject expression."
                        valueEditor="el" />
                <cv:setBoolean var="edit"
                               value="true"
                               expressionType="static"
                               label="User editable"
                               descVisible="false"
                               desc="Can user change subject." />
              </cv:buildMap>
              <cv:buildMap var="to" subcategory="true" label="To Recipients" descVisible="true" desc="Defines primary email recipients.">
                <cv:buildCollection var="recipients" itemType="contactType" label="Recipients" descVisible="false" desc="List of primary email recipients." />
                <cv:setBoolean var="edit"
                               value="true"
                               expressionType="static"
                               label="User editable"
                               descVisible="false"
                               desc="Can user change to recipients." />
              </cv:buildMap>
              <cv:buildMap var="cc" subcategory="true" label="CC Recipients" descVisible="true" desc="Defines CC email recipients.">
                <cv:buildCollection var="recipients" itemType="contactType" label="Recipients" descVisible="false" desc="List of CC email recipients." />
                <cv:setBoolean var="edit"
                               value="false"
                               expressionType="static"
                               label="User editable"
                               descVisible="false"
                               desc="Can user change cc recipients." />
              </cv:buildMap>
              <cv:buildMap var="attachments" subcategory="true" label="Attachments" descVisible="true" desc="Defines attachment selection settings.">
                <cv:setBoolean var="edit"
                               value="false"
                               expressionType="static"
                               label="User editable"
                               descVisible="false"
                               desc="Can user change attachments." />
                <cv:set var="libraryName"
                        value=""
                        expressionType="static"
                        label="Library Name"
                        descVisible="false"
                        desc="Library for selecting attachments. Value is library name." />
              </cv:buildMap>
            </cv:buildMap>
          </cv:buildMap>
          <cv:buildMap var="approverGroupType" label="Approver group">
            <cv:set var="name"
                    value=""
                    expressionType="static"
                    label="Group name"
                    descVisible="false"
                    desc="Group name (label)."
                    editor="sfGroup"
                    editorGroupValue="label" />
            <cv:set var="id"
                    value=""
                    expressionType="static"
                    label="Group ID"
                    descVisible="false"
                    desc="group ID or expression for getting the ID."
                    valueEditor="el" />
            <cv:setBoolean var="showGroup" expressionType="static" label="Show group" descVisible="false" desc="If true group name is shown in approver selection list." />
            <cv:setBoolean var="showGroupUsers" expressionType="static" label="Show group users" descVisible="false" desc="If true group users are shown in approver selection list." />
          </cv:buildMap>
          <cv:buildMap var="approverUserType" label="Approver user">
            <cv:set var="name"
                    value=""
                    expressionType="static"
                    label="Full name"
                    descVisible="false"
                    desc="Full user name." />
            <cv:set var="id"
                    value=""
                    expressionType="static"
                    label="User ID"
                    descVisible="false"
                    desc="User record ID or expression getting the ID."
                    valueEditor="el" />
          </cv:buildMap>
          <cv:buildMap var="extSignerType" label="External signer">
            <cv:set var="name"
                    value=""
                    expressionType="static"
                    label="Full name"
                    descVisible="false"
                    desc="Full contact name." />
            <cv:set var="id"
                    value=""
                    expressionType="static"
                    label="Contact ID"
                    descVisible="false"
                    desc="Contact record ID or expression for getting the ID."
                    valueEditor="el" />
          </cv:buildMap>
          <cv:buildMap var="intSignerType" label="Internal signer">
            <cv:set var="name"
                    value=""
                    expressionType="static"
                    label="Full name"
                    descVisible="false"
                    desc="Full user name." />
            <cv:set var="id"
                    value=""
                    expressionType="static"
                    label="User ID"
                    descVisible="false"
                    desc="User record ID or expression for getting the ID."
                    valueEditor="el" />
          </cv:buildMap>
          <cv:buildMap var="contactType" label="Contact">
            <cv:set var="name"
                    value=""
                    expressionType="static"
                    label="Full name"
                    descVisible="false"
                    desc="Full contact name." />
            <cv:set var="id"
                    value=""
                    expressionType="static"
                    label="Contact ID"
                    descVisible="false"
                    desc="Contact record ID or expression for getting the ID."
                    valueEditor="el" />
          </cv:buildMap>
          <cv:buildMap var="inputType" label="Question">
            <cv:set var="label" label="Label" desc="Question label i.e. question itself." />
            <cv:set var="value" label="Default value" desc="Default value if any." />
          </cv:buildMap>
          <!-- Non visible values -->
          <cv:addMapEntry key="template" value="Document" map="${dynSettings.document}" />
          <cv:addMapEntry key="contenteditable-toolbarcolor"
                          value="#FFFFFF"
                          label="Toolbar color"
                          descVisible="false"
                          desc="Toolbar background color"
                          map="${dynSettings.edit.editorSettings}" />
          <cv:addMapEntry key="contenteditable-toolbarcontainer"
                          value="editable-toolbarContainer"
                          label="Toolbar container"
                          descVisible="false"
                          desc="Id of toolbar container"
                          map="${dynSettings.edit.editorSettings}" />
          <cv:set var="editorSettings" value="${dynSettings.edit.editorSettings}" />
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="Next" name="Next">
        <logic>
          <cc:choose>
            <cc:when test="${param.eventID == &apos;new&apos; and otherPdf == false}">
              <fl:start segment="Refresh data" label="Load data" />
            </cc:when>
            <cc:otherwise>
              <fl:start segment="Load Files" label="Load files" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Reset for testing" name="Reset for testing" onError="System error">
        <logic>
          <!-- Only for testing -->
          <sfcrud:update type="dynamo__Dynamo_Document__c">
            <sfcrud:field name="Id" value="${param.testDynDocId}" />
            <sfcrud:field name="Name" value="${dynDocName}" />
            <cc:if test="${id.startsWith(&apos;006&apos;)}">
              <sfcrud:field name="dynamo__Opportunity__c" value="${id}" />
            </cc:if>
            <sfcrud:field name="dynamo__Parent_Record_ID__c" value="${id}" />
            <sfcrud:field name="dynamo__Template_ID__c" value="${templateId}" />
            <sfcrud:field name="dynamo__Document_Status__c" value="Draft" />
            <sfcrud:field name="dynamo__Locked__c" value="${false}" />
            <sfcrud:field name="dynamo__Last_Editor__c" value="${&apos;&apos;}" />
            <sfcrud:field name="dynamo__Next_User__c" value="${&apos;&apos;}" />
            <sfcrud:field name="dynamo__Publication_URL__c" value="${&apos;&apos;}" />
            <sfcrud:field name="dynamo__Configuration_JSON__c" value="${confJSON}" />
          </sfcrud:update>
          <cv:set var="dynDocId" value="${param.testDynDocId}" />
          <fl:next step="Query document" />
        </logic>
      </step>
      <step id="System error" name="System error">
        <logic>
          <fl:start segment="Error" label="Error" />
        </logic>
      </step>
      <step id="List" name="List">
        <logic>
          <soql:query var="relatedDynDocs" select="SELECT Id, Name, dynamo__Document_Status__c, dynamo__Parent_Record_ID__c, CreatedDate, LastModifiedDate, dynamo__Template_ID__c FROM dynamo__Dynamo_Document__c where dynamo__Parent_Record_ID__c = &apos;${id}&apos; and dynamo__Template_ID__c = &apos;${templateId}&apos; order by LastModifiedDate desc" hideFromDataTab="true" />
          <cc:choose>
            <cc:when test="${not empty relatedDynDocs}">
              <fl:next label="Existing documents" step="Select document" />
            </cc:when>
            <cc:otherwise>
              <fl:next label="No documents" step="New" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <screenStep id="Select document" name="Select document" screen="Main/Select documentScreen.html" />
      <step id="Exit" name="Exit">
        <logic>
          <fl:start segment="End" />
        </logic>
      </step>
    </steps>
  </startFlow>
  <standardFlow id="Load Files">
    <events>
      <defaultEvent step="Status" />
    </events>
    <steps>
      <step id="Status" name="Status">
        <logic>
          <cc:choose>
            <cc:when test="${dynDocStatus == &apos;Signed&apos;}">
              <fl:next step="Signed" label="" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Draft&apos;}">
              <fl:next label="" step="Draft" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;In Review&apos;}">
              <fl:next step="In review" label="" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;External New Version Request&apos;}">
              <fl:next label="" step="External New Version Request" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="Load saved files" label="Other status" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Draft" name="Draft">
        <logic>
          <cc:choose>
            <cc:when test="${otherPdf}">
              <cv:setProperty target="${dynSettings.edit.enabled}" value="${false}" />
              <cv:setProperty target="${dynSettings.userView.refresh}" value="${false}" />
              <cc:choose>
                <cc:when test="${not empty conf.filePDF}">
                  <fl:next label="PDF already linked" step="Load saved files" />
                </cc:when>
                <cc:otherwise>
                  <fl:next label="Use exiting PDF" step="List PDF files" />
                </cc:otherwise>
              </cc:choose>
            </cc:when>
            <cc:otherwise>
              <fl:next step="Load HTML" label="Draft" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="In review" name="In review">
        <logic>
          <cc:choose>
            <cc:when test="${dynSettings.approval.allowApproverEdit and otherPdf == false}">
              <fl:next step="Load HTML" label="In review edit" />
            </cc:when>
            <cc:otherwise>
              <cv:setProperty target="${dynSettings.userView.compare}" value="${false}" />
              <cv:setProperty target="${dynSettings.approval.allowApproverEdit}" value="${false}" />
              <fl:next step="Load saved files" label="In review read only" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Signed" name="Signed" onError="Error">
        <logic>
          <cc:if test="${not empty conf.finalPDF}">
            <sffile:load var="fullPDF" recordId="${conf.finalPDF}" />
          </cc:if>
          <cc:choose>
            <cc:when test="${not empty fullPDF}">
              <cv:set var="fileName" value="${fullPDF.title}" hideFromDataTab="true" />
              <fl:next step="No compose" />
            </cc:when>
            <cc:otherwise>
              <fl:error message="Signed PDF not defined." />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="External New Version Request" name="External New Version Request">
        <logic>
          <cc:choose>
            <cc:when test="${otherPdf}">
              <fl:next label="PDF already linked" step="Load saved files" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="Load HTML" label="Draft" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Load HTML" name="Load HTML" message="Loading previous version" onError="File not found">
        <logic>
          <cc:if test="${not empty conf.fileHTML}">
            <sffile:loadLatestContentVersion contentDocumentId="${conf.fileHTML}" var="composedDoc" hideFromDataTab="true" />
            <htmlex:getEditableAreas value="${composedDoc}" />
            <cv:set var="fileName" value="${composedDoc.fileName}" hideFromDataTab="true" />
          </cc:if>
          <fl:start segment=":next" label="Compose content" />
        </logic>
      </step>
      <step id="Load saved files" name="Load saved files" onError="File not found">
        <logic>
          <cc:if test="${not empty conf.filePDF}">
            <sffile:loadLatestContentVersion var="fullPDF" contentDocumentId="${conf.filePDF}" />
            <cv:set var="fileName" value="${fullPDF.title}" hideFromDataTab="true" />
          </cc:if>
          <cc:if test="${not empty conf.recordFileId}">
            <sffile:loadLatestContentVersion var="fullPDF" contentDocumentId="${conf.recordFileId}" />
            <cv:set var="fileName" value="${fullPDF.title}" hideFromDataTab="true" />
          </cc:if>
          <cc:if test="${not empty conf.fileHTML}">
            <sffile:loadLatestContentVersion var="composedDoc" contentDocumentId="${conf.fileHTML}" />
          </cc:if>
          <fl:next step="No compose" />
        </logic>
      </step>
      <step id="Error" name="Error">
        <logic>
          <cv:set var="flowStatus" value="error" hideFromDataTab="true" />
          <fl:start segment="Error" />
        </logic>
      </step>
      <step id="No compose" name="No compose">
        <logic>
          <dt:setDateTime var="lastDataRefresh"
                          year="${conf.lastDataRefresh.year}"
                          month="${conf.lastDataRefresh.month}"
                          day="${conf.lastDataRefresh.day}"
                          hour="${conf.lastDataRefresh.hour}"
                          minute="${conf.lastDataRefresh.min}"
                          second="${conf.lastDataRefresh.sec}" />
          <fl:start segment="Init View" label="Use existing PDF" />
        </logic>
      </step>
      <step id="File not found" name="File not found">
        <logic>
          <cc:choose>
            <cc:when test="${otherPdf}">
              <fl:next step="Error" label="No template" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="No files" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <screenStep id="No files" name="No files" screen="Main/No filesScreen.html" />
      <step id="Restart" name="Restart">
        <logic>
          <cv:setMap var="conf" />
          <cv:set var="versionNumber" value="${0}" />
          <cv:set var="versionNumberSaved" value="${versionNumber}" />
          <cv:addMapEntry key="versionNumber" value="${versionNumber}" map="${conf}" />
          <cv:set var="dynDocStatus" value="Draft" />
          <fl:start segment=":next" />
        </logic>
      </step>
      <step id="Exit" name="Exit">
        <logic>
          <fl:start segment="End" />
        </logic>
      </step>
      <step id="List PDF files" name="List PDF files" onError="Error">
        <logic>
          <soql:query select="SELECT ContentDocument.Id, ContentDocument.LatestPublishedVersion.VersionNumber, ContentDocument.Title, ContentDocument.LatestPublishedVersion.PathOnClient, ContentDocument.FileType, ContentDocument.FileExtension, ContentDocument.CreatedDate FROM ContentDocumentLink where LinkedEntityId = &apos;${id}&apos; and ContentDocument.FileExtension = &apos;pdf&apos; ORDER BY ContentDocument.ContentModifiedDate DESC" var="otherPdfList" hideFromDataTab="true" />
          <cc:if test="${empty otherPdfList}">
            <fl:error message="No related PDF files found for record &apos;${id}&apos;." />
          </cc:if>
          <cv:count var="fileCount" value="${otherPdfList}" />
          <cc:choose>
            <cc:when test="${fileCount == 1}">
              <cv:set var="otherPdfDefaultId" value="${otherPdfList.ContentDocument.Id}" />
              <cv:set var="otherPdfList" />
              <fl:next label="One file" step="Save PDF file selection" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="otherPdfDefaultId" value="" />
              <fl:next step="Select PDF file" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <screenStep id="Select PDF file" name="Select PDF file" screen="Main/Select PDF fileScreen.html" />
      <step id="Save PDF file selection" name="Save PDF file selection" onError="Error">
        <logic>
          <cv:set var="otherPdfId" />
          <cc:choose>
            <cc:when test="${not empty otherPdfDefaultId}">
              <cv:set var="otherPdfId" value="${otherPdfDefaultId}" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="otherPdfId" value="${param.button}" />
            </cc:otherwise>
          </cc:choose>
          <cc:choose>
            <cc:when test="${not empty otherPdfId}">
              <cv:addMapEntry key="filePDF" map="${conf}" value="${otherPdfId}" />
              <cv:toJSON value="${conf}" var="confJSON" />
              <sfcrud:update type="dynamo__Dynamo_Document__c">
                <sfcrud:field name="Id" value="${dynDocId}" />
                <sfcrud:field name="dynamo__Configuration_JSON__c" value="${confJSON}" />
                <sfcrud:field name="Name" value="${dynDocName}" />
              </sfcrud:update>
              <fl:next step="Load saved files" />
            </cc:when>
            <cc:otherwise>
              <fl:error message="No PDF file specified (variable otherPdfId = empty)." />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Refresh data">
    <events>
      <defaultEvent step="Start data refresh" />
    </events>
    <steps>
      <step id="Start data refresh" name="Start data refresh">
        <logic>
          <!-- DO NOT edit this step -->
          <dt:setDateTime var="lastDataRefresh" />
          <cv:setMap var="lastDataRefreshMap" hideFromDataTab="true">
            <cv:addMapEntry key="year" value="${lastDataRefresh.year}" />
            <cv:addMapEntry key="month" value="${lastDataRefresh.monthOfYear}" />
            <cv:addMapEntry key="day" value="${lastDataRefresh.dayOfMonth}" />
            <cv:addMapEntry key="hour" value="${lastDataRefresh.hourOfDay}" />
            <cv:addMapEntry key="min" value="${lastDataRefresh.minuteOfHour}" />
            <cv:addMapEntry key="sec" value="${lastDataRefresh.secondOfMinute}" />
          </cv:setMap>
          <cv:addMapEntry map="${conf}" key="lastDataRefresh" value="${lastDataRefreshMap}" />
          <!-- This version will contain refreshed data from Salesforce -->
          <cv:set value="${versionNumber+1}" var="versionNumber" hideFromDataTab="" />
          <cc:if test="${debugVersions}">
            <dbg:log level="SEVERE" message="Refresh" />
            <dbg:logVar value="${versionNumber}" />
          </cc:if>
          <fl:start segment=":next" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Custom Data">
    <events>
      <defaultEvent step="Start" />
    </events>
    <steps>
      <step id="Start" name="Start">
        <logic>
          <fl:next step="Load Salesforce data" />
        </logic>
      </step>
      <step id="Load Salesforce data" name="Load Salesforce data" message="Loading Data">
        <logic>
          <sff:record id="mainRecord"
                      var="opp"
                      type="Opportunity"
                      recordID="${id}"
                      fields="Id"
                      mainRecord="true" />
          <!-- Language -->
          <cv:set var="documentLanguage" value="en" />
          <cv:setTranslation language="${documentLanguage}" var="labels" />
          <dt:setDateTime var="testTime" />
          <fl:next step="Load clauses" />
        </logic>
      </step>
      <step id="Load clauses" name="Load clauses">
        <logic>
          <!-- Clauses -->
          <soql:query var="dynamoClausesQuery" select="SELECT Id, Name, dynamo__Clause_Text__c, dynamo__Title__c, dynamo__Category__c, dynamo__Index__c, dynamo__Clause_Language__c FROM dynamo__Clause__c WHERE Name IN (&apos;&apos;) AND dynamo__Clause_Language__c = &apos;${documentLanguage}&apos;" hideFromDataTab="true" />
          <cv:setMap var="dynamoClausesMap" hideFromDataTab="true" />
          <cl:forEach var="i" value="${dynamoClausesQuery}">
            <cv:addMapEntry key="${i.Name}" value="${i.dynamo__Clause_Text__c}" map="${dynamoClausesMap}" />
          </cl:forEach>
          <fl:next step="Chatter" />
        </logic>
      </step>
      <step id="Chatter" name="Chatter">
        <logic>
          <!-- Use internal comments (chatter feed) pane at left in default view. Comments are always used if internal approval is needed. -->
          <!-- Chatter feed is always shown if internal approval is used -->
          <cc:if test="${approvalRequired or dynSettings.userView.comments}">
            <!-- CUSTOMIZE: users for chatter mentions -->
            <!-- TODO: move where expression to settings -->
            <soql:query select="SELECT Id, Name, Division, IsActive FROM User where isActive = true limit 40" var="mentionOptions" hideFromDataTab="true" />
          </cc:if>
          <fl:next step="Set document name" />
        </logic>
      </step>
      <step id="Set document name" name="Set document name">
        <logic>
          <cv:set var="documentTemplateName" value="${dynSettings.document.template}" />
          <cc:choose>
            <cc:when test="${param.eventID == &apos;new&apos;}">
              <cc:choose>
                <cc:when test="${not empty dynSettings.document.name.nameEnd}">
                  <cv:evalResolved var="nameEnd" value="${dynSettings.document.name.nameEnd}" />
                  <cv:set var="nameEnd" value="${&apos; &apos;}${nameEnd}" />
                </cc:when>
                <cc:otherwise>
                  <cv:set var="nameEnd" value="${&apos;&apos;}" />
                </cc:otherwise>
              </cc:choose>
              <cv:set var="dynDocName" value="${dynSettings.document.name.nameStart}${nameEnd}" />
              <sfcrud:update type="dynamo__Dynamo_Document__c">
                <sfcrud:field name="Id" value="${dynDocId}" />
                <sfcrud:field name="Name" value="${dynDocName}" />
              </sfcrud:update>
            </cc:when>
            <!-- Open existing document -->
            <cc:otherwise>
              <!-- If document name needs to be updated on every open -->
            </cc:otherwise>
          </cc:choose>
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="Next" name="Next">
        <logic>
          <!-- CUSTOMIZE: decide if options are shown. Now always false. -->
          <cc:choose>
            <cc:when test="${event == &apos;new&apos;}">
              <cv:set var="documentOptions" value="false" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="documentOptions" value="false" />
            </cc:otherwise>
          </cc:choose>
          <fl:start segment=":next" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Questions">
    <events>
      <defaultEvent step="Start" />
    </events>
    <steps>
      <step id="Start" name="Start">
        <logic>
          <cc:choose>
            <cc:when test="${documentOptions}">
              <fl:next step="Options" label="Choose options" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="Default options" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <screenStep id="Options" name="Options" screen="Main/OptionsScreen.html" />
      <step id="Default options" name="Default options">
        <logic>
          <fl:next step="Options selected" />
        </logic>
      </step>
      <step id="Options selected" name="Options selected">
        <logic>
          <fl:start segment="Init View" />
        </logic>
      </step>
      <step id="Exit" name="Exit">
        <logic>
          <cv:set var="flowStatus" value="exit" />
          <fl:start segment="End" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Init View">
    <events>
      <defaultEvent step="Document status" />
    </events>
    <steps>
      <step id="Document status" name="Document status">
        <logic>
          <!-- Default view -->
          <cc:choose>
            <cc:when test="${otherPdf}">
              <cv:set var="viewMode" value="pdf" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="viewMode" value="default" />
            </cc:otherwise>
          </cc:choose>
          <!-- Current user -->
          <cc:choose>
            <cc:when test="${UserInfo.userId == dynDoc.Owner.Id}">
              <cv:setBoolean var="isUserOwner" value="true" />
            </cc:when>
            <cc:otherwise>
              <cv:setBoolean var="isUserOwner" value="false" />
            </cc:otherwise>
          </cc:choose>
          <!-- View screen panels -->
          <cc:choose>
            <cc:when test="${dynSettings.userView.comments}">
              <cv:set var="showInternalComments" value="true" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="showInternalComments" value="false" />
            </cc:otherwise>
          </cc:choose>
          <!-- Default UI button visibility -->
          <cv:buildMap var="dynButton">
            <cc:choose>
              <cc:when test="${otherPdf}">
                <cv:setBoolean var="document" value="false" />
                <cv:setBoolean var="pdf" value="true" />
              </cc:when>
              <cc:otherwise>
                <cv:setBoolean var="document" value="true" />
                <cc:choose>
                  <cc:when test="${dynSettings.userView.pdf}">
                    <cv:setBoolean var="pdf" value="true" />
                  </cc:when>
                  <cc:otherwise>
                    <cv:setBoolean var="pdf" value="false" />
                  </cc:otherwise>
                </cc:choose>
              </cc:otherwise>
            </cc:choose>
            <cc:choose>
              <cc:when test="${dynSettings.userView.report}">
                <cv:setBoolean var="report" value="true" />
              </cc:when>
              <cc:otherwise>
                <cv:setBoolean var="report" value="false" />
              </cc:otherwise>
            </cc:choose>
            <cv:setBoolean var="compare" value="false" />
            <cv:setBoolean var="edit" value="false" />
            <cv:setBoolean var="requestApproval" value="false" />
            <cv:setBoolean var="approve" value="false" />
            <cv:setBoolean var="reject" value="false" />
            <cv:setBoolean var="share" value="false" />
            <cv:setBoolean var="draft" value="false" />
            <cv:setBoolean var="withdraw" value="false" />
            <cv:setBoolean var="refresh" value="false" />
            <cv:setBoolean var="email" value="false" />
          </cv:buildMap>
          <!-- External feed -->
          <cv:set var="externalFeedViewOnly" value="${false}" />
          <cc:choose>
            <cc:when test="${dynDocStatus == &apos;Draft&apos;}">
              <fl:next label="Draft" step="Draft" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;In Review&apos;}">
              <fl:next label="In Review" step="In Review" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Approved&apos;}">
              <fl:next label="Approved" step="Approved" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Rejected&apos;}">
              <fl:next label="Rejected" step="Rejected" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Sent&apos;}">
              <fl:next label="Sent" step="Sent" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Waiting Signature&apos;}">
              <fl:next label="Waiting signature" step="Waiting Signature" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Signed&apos;}">
              <fl:next label="Signed" step="Signed" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;External Review&apos;}">
              <fl:next step="External Review" label="External Review" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;External Approved&apos;}">
              <fl:next step="External Approved" label="External Approved" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;External Rejected&apos;}">
              <fl:next step="External Rejected" label="External Rejected" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;External New Version Request&apos;}">
              <fl:next step="External New Version Request" label="External New Version Request" />
            </cc:when>
            <cc:when test="${dynDocStatus == &apos;Error&apos;}">
              <fl:next step="Error" label="Error status" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="errorMessageCustom" value="Invalid status: ${dynDocStatus}" />
              <fl:start segment="Error" label="Invalid status" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Draft" name="Draft">
        <logic>
          <!-- Approval criteria -->
          <cc:choose>
            <cc:when test="${not empty dynSettings.approval.criteria}">
              <cc:if test="${otherPdf == false}">
                <cv:setBoolean var="saveZeroVersion" value="true" />
              </cc:if>
              <cv:evalResolved var="approvalRequired" value="${dynSettings.approval.criteria}" />
            </cc:when>
            <cc:otherwise>
              <cv:setBoolean var="saveZeroVersion" value="false" />
              <cv:set var="approvalRequired" value="false" />
            </cc:otherwise>
          </cc:choose>
          <cc:choose>
            <cc:when test="${approvalRequired}">
              <cv:setProperty target="${dynButton.requestApproval}" value="${true}" />
            </cc:when>
            <cc:otherwise>
              <cc:if test="${dynSettings.share.enabled}">
                <cv:setProperty target="${dynButton.share}" value="${true}" />
              </cc:if>
              <cc:if test="${dynSettings.email.enabled}">
                <cv:setProperty target="${dynButton.email}" value="${true}" />
              </cc:if>
            </cc:otherwise>
          </cc:choose>
          <cc:choose>
            <cc:when test="${otherPdf}">
              <fl:next step="Next" label="No template" />
            </cc:when>
            <cc:otherwise>
              <cc:if test="${dynSettings.edit.enabled == true and dynDoc.dynamo__Locked__c == false}">
                <cv:setProperty target="${dynButton.edit}" value="${true}" />
              </cc:if>
              <cc:if test="${dynSettings.userView.refresh}">
                <cv:setProperty target="${dynButton.refresh}" value="${true}" />
              </cc:if>
              <cc:if test="${dynSettings.userView.compare}">
                <cv:setProperty target="${dynButton.compare}" value="${true}" />
              </cc:if>
              <fl:next step="Compose" label="Compose" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="In Review" name="In Review">
        <logic>
          <!-- Approver users will see approve and reject buttons. If document is locked those buttons are disabled. -->
          <!-- Non approvers will not see approve and reject buttons -->
          <!-- Approvers can edit if document is not locked -->
          <cv:set var="canApprove" value="${false}" />
          <cv:set var="reviewEdit" value="${false}" />
          <cc:choose>
            <cc:when test="${not empty approverId}">
              <cc:if test="${approverId == UserInfo.userId}">
                <cv:set var="canApprove" value="true" />
              </cc:if>
            </cc:when>
            <cc:otherwise>
              <cl:forEach value="${conf.approvers}" var="i">
                <cc:if test="${i.id == UserInfo.userId}">
                  <cv:set var="approverId" value="${i.id}" />
                  <cv:set var="canApprove" value="true" />
                </cc:if>
              </cl:forEach>
            </cc:otherwise>
          </cc:choose>
          <cc:if test="${canApprove}">
            <cv:setProperty target="${dynButton.reject}" value="${true}" />
            <cv:setProperty target="${dynButton.approve}" value="${true}" />
          </cc:if>
          <!-- Check document locking -->
          <cc:choose>
            <!-- Locked -->
            <cc:when test="${dynDoc.dynamo__Locked__c}">
              <cv:set var="buttonRejectDisabled" value="true" hideFromDataTab="true" />
              <cv:set var="buttonApproveDisabled" value="true" hideFromDataTab="true" />
            </cc:when>
            <!-- Not locked -->
            <cc:otherwise>
              <cv:set var="buttonRejectDisabled" value="false" hideFromDataTab="true" />
              <cv:set var="buttonApproveDisabled" value="false" hideFromDataTab="true" />
              <cc:if test="${canApprove}">
                <cc:if test="${conf.userView.compare}">
                  <cv:setProperty target="${dynButton.compare}" value="${true}" />
                  <cv:set var="viewMode" value="compare" />
                </cc:if>
                <cv:set var="showInternalComments" value="true" />
                <cc:if test="${dynSettings.approval.allowApproverEdit}">
                  <cv:setProperty target="${dynButton.edit}" value="${true}" />
                  <cv:set var="reviewEdit" value="${true}" />
                </cc:if>
              </cc:if>
              <cc:if test="${dynSettings.approval.allowWithdraw and isUserOwner}">
                <cv:setProperty target="${dynButton.withdraw}" value="${true}" />
              </cc:if>
            </cc:otherwise>
          </cc:choose>
          <cc:choose>
            <cc:when test="${reviewEdit}">
              <!-- TODO: Is compose wanted? -->
              <fl:next step="Compose" label="In review edit" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="Next" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Approved" name="Approved">
        <logic>
          <cv:set var="showInternalComments" value="true" />
          <cc:if test="${dynSettings.approval.allowChangeToDraft and isUserOwner}">
            <cv:setProperty target="${dynButton.draft}" value="${true}" />
          </cc:if>
          <cc:if test="${dynSettings.share.enabled}">
            <cv:setProperty target="${dynButton.share}" value="${true}" />
          </cc:if>
          <cc:if test="${dynSettings.userView.compare}">
            <cv:setProperty target="${dynButton.compare}" value="${true}" />
          </cc:if>
          <cc:if test="${dynSettings.email.enabled}">
            <cv:setProperty target="${dynButton.email}" value="${true}" />
          </cc:if>
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="Rejected" name="Rejected">
        <logic>
          <cv:set var="showInternalComments" value="true" />
          <cc:if test="${dynSettings.approval.allowChangeToDraft and isUserOwner}">
            <cv:setProperty target="${dynButton.draft}" value="${true}" />
          </cc:if>
          <cc:if test="${dynSettings.userView.compare}">
            <cv:setProperty target="${dynButton.compare}" value="${true}" />
          </cc:if>
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="External Review" name="External Review">
        <logic>
          <cv:set var="showExternalComments" value="${true}" />
          <cv:set var="externalFeedViewOnly" value="${true}" />
          <cc:if test="${UserInfo.userId == dynDoc.Owner.Id}">
            <cv:addMapEntry key="withdraw" map="${dynButton}" value="${true}" />
          </cc:if>
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="External Approved" name="External Approved">
        <logic>
          <cv:set var="showExternalComments" value="true" />
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="External Rejected" name="External Rejected">
        <logic>
          <cc:if test="${UserInfo.userId == dynDoc.Owner.Id}">
            <cv:addMapEntry key="draft" map="${dynButton}" value="${true}" />
          </cc:if>
          <cv:set var="showExternalComments" value="true" />
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="External New Version Request" name="External New Version Request">
        <logic>
          <cv:set var="showExternalComments" value="true" />
          <cc:if test="${UserInfo.userId == dynDoc.Owner.Id}">
            <cv:addMapEntry key="draft" map="${dynButton}" value="${true}" />
          </cc:if>
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="Sent" name="Sent">
        <logic>
          <cv:setProperty target="${dynButton.document}" value="${false}" />
          <cc:if test="${isUserOwner}">
            <cv:setProperty target="${dynButton.draft}" value="${true}" />
          </cc:if>
          <cv:set var="viewMode" value="pdf" />
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="Waiting Signature" name="Waiting Signature">
        <logic>
          <cv:set var="viewMode" value="report" />
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="Signed" name="Signed">
        <logic>
          <cv:set var="viewMode" value="pdf" />
          <cv:addMapEntry key="document" map="${dynButton}" value="${false}" />
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="Error" name="Error">
        <logic>
          <cv:set var="viewMode" value="report" />
          <cv:setProperty target="${dynButton.draft}" value="${true}" />
          <fl:next step="Next" />
        </logic>
      </step>
      <step id="Next" name="Next">
        <logic>
          <fl:start segment="View" label="View" step="View screen" />
        </logic>
      </step>
      <flowStep id="Compose" name="Compose" sequenceID="ComposeDocument" sequenceSrc="" nextStep="Next">
        <initialization />
      </flowStep>
    </steps>
  </standardFlow>
  <standardFlow id="View">
    <events>
      <defaultEvent step="Start preview" />
    </events>
    <steps>
      <step id="Start preview" name="Start preview" message=" ">
        <logic>
          <cc:choose>
            <cc:when test="${viewMode == &apos;pdf&apos;}">
              <cc:choose>
                <cc:when test="${not empty fullPDF}">
                  <fl:next step="View screen" label="Cached PDF" />
                </cc:when>
                <cc:otherwise>
                  <cc:choose>
                    <cc:when test="${not empty composedDoc}">
                      <pdf:exportPDF var="fullPDF" document="${composedDoc}" />
                      <fl:next step="View screen" label="Cached PDF" />
                    </cc:when>
                    <cc:otherwise>
                      <fl:error message="Can&apos;t create PDF (empty composedDoc)" />
                    </cc:otherwise>
                  </cc:choose>
                </cc:otherwise>
              </cc:choose>
            </cc:when>
            <cc:otherwise>
              <cc:choose>
                <cc:when test="${viewMode == &apos;report&apos;}">
                  <fl:next label="Report" step="Prepare report view" />
                </cc:when>
                <cc:when test="${viewMode == &apos;compare&apos;}">
                  <fl:next label="Compare" step="Prepare compare view" />
                </cc:when>
                <cc:otherwise>
                  <fl:next label="Default" step="Prepare default view" />
                </cc:otherwise>
              </cc:choose>
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Query external comments" name="Query external comments">
        <logic>
          <cv:set var="externalFeed" value="${&apos;&apos;}" hideFromDataTab="true" />
          <soql:query var="externalFeed" select="SELECT Id, CreatedDate, dynamo__Message__c FROM dynamo__Dynamo_Document_Event__c WHERE dynamo__Dynamo_Document__c =&apos;${dynDoc.Id}&apos; AND dynamo__Type__c = &apos;Comment&apos; order by CreatedDate desc" hideFromDataTab="true" />
          <cv:setMap var="externalFeedFields" hideFromDataTab="true">
            <cv:addMapEntry key="dynamo__Dynamo_Document__c" value="${dynDoc.Id}" />
            <cv:addMapEntry key="dynamo__Type__c" value="Comment" />
          </cv:setMap>
          <soql:query var="externalReplyFeed" select="SELECT Id, CreatedDate, dynamo__Message__c, dynamo__Type__c, dynamo__Parent_Event__c FROM dynamo__Dynamo_Document_Event__c WHERE dynamo__Dynamo_Document__c =&apos;${dynDoc.Id}&apos; AND dynamo__Type__c = &apos;Reply&apos; order by CreatedDate desc" hideFromDataTab="true" />
          <cv:setMap var="externalReplyFeedFields" hideFromDataTab="true">
            <cv:addMapEntry key="dynamo__Dynamo_Document__c" value="${dynDoc.Id}" />
            <cv:addMapEntry key="dynamo__Type__c" value="Reply" />
          </cv:setMap>
          <fl:next step="View screen" />
        </logic>
      </step>
      <screenStep id="View screen" name="View screen" screen="Main/View screenScreen.html" />
      <step id="Handle buttons" name="Handle buttons">
        <logic>
          <cc:choose>
            <cc:when test="${param.button == &apos;exit&apos;}">
              <cv:set var="flowStatus" value="exit" />
              <fl:start segment="End" label="Exit" />
            </cc:when>
            <cc:when test="${param.button == &apos;edit&apos;}">
              <fl:start segment="Edit" label="Edit" />
            </cc:when>
            <cc:when test="${param.button == &apos;compare&apos;}">
              <cv:set var="viewMode" value="compare" />
              <fl:next step="Start preview" label="Compare" />
            </cc:when>
            <cc:when test="${param.button == &apos;default&apos;}">
              <cv:set var="viewMode" value="default" />
              <fl:next step="Start preview" label="Comment" />
            </cc:when>
            <cc:when test="${param.button == &apos;report&apos;}">
              <cv:set var="viewMode" value="report" />
              <fl:next step="Start preview" label="Activity" />
            </cc:when>
            <cc:when test="${param.button == &apos;pdf&apos;}">
              <cv:set var="viewMode" value="pdf" />
              <fl:next step="Start preview" label="Preview" />
            </cc:when>
            <cc:when test="${param.button == &apos;email&apos;}">
              <fl:next step="Send email" label="Send Email" />
            </cc:when>
            <cc:otherwise>
              <fl:next step="View screen" label="Otherwise" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Edit button handler" name="Edit button handler">
        <logic>
          <fl:start segment="Edit" step="Edit button handler" />
        </logic>
      </step>
      <step id="To draft" name="To draft">
        <logic>
          <cv:set var="dynDocStatus" value="Draft" />
          <cv:set var="approverId" value="" />
          <sfcrud:update type="dynamo__Dynamo_Document__c">
            <sfcrud:field name="Id" value="${dynDocId}" />
            <sfcrud:field name="dynamo__Document_Status__c" value="${dynDocStatus}" />
            <sfcrud:field name="dynamo__Next_User__c" value="${&apos;&apos;}" />
            <sfcrud:field name="dynamo__Publication_URL__c" value="${publishURL}" />
            <sfcrud:field name="dynamo__Publication_Date__c" value="${&apos;&apos;}" />
            <sfcrud:field name="dynamo__Publication_Expires__c" value="${&apos;&apos;}" />
          </sfcrud:update>
          <fl:start segment="Load Files" label="Reload" />
        </logic>
      </step>
      <step id="Withdraw" name="Withdraw">
        <logic>
          <!-- TODO: send email notification to sharing or approval parties -->
          <cc:choose>
            <!-- Share withdraw -->
            <cc:when test="${not empty publishURL}">
              <sfpub:expirePublication publicationID="${conf.publications.lastPublicationId}" />
              <cv:set var="publishURL" value="${&apos;&apos;}" />
              <sfcrud:create type="dynamo__Dynamo_Document_Event__c" var="dview">
                <sfcrud:field name="dynamo__Type__c" value="Other" />
                <sfcrud:field name="dynamo__Dynamo_Document__c" value="${dynDocId}" />
                <sfcrud:field name="dynamo__Message__c" value="Document withdraw: share link has been disabled (expired) and document status was changed to draft" />
              </sfcrud:create>
            </cc:when>
            <!-- Approval withdraw -->
            <cc:otherwise />
          </cc:choose>
          <fl:next step="To draft" />
        </logic>
      </step>
      <step id="Refresh data" name="Refresh data">
        <logic>
          <cv:set var="prevDoc" value="${composedDoc}" hideFromDataTab="true" />
          <cv:set var="prevVersion" value="${versionNumber}" />
          <fl:start segment="Refresh data" label="Refresh" />
        </logic>
      </step>
      <flowStep id="Share"
                name="Share"
                sequenceID="ShareLogic"
                sequenceSrc=""
                nextStep="After subflow"
                step="After subflow">
        <initialization />
      </flowStep>
      <flowStep id="Compare versions" name="Compare versions" sequenceID="Compare" sequenceSrc="" nextStep="View screen">
        <initialization />
      </flowStep>
      <flowStep id="Request approval"
                name="Request approval"
                sequenceID="RequestApproval"
                sequenceSrc=""
                nextStep="After subflow"
                step="After subflow">
        <initialization />
      </flowStep>
      <flowStep id="Approve" name="Approve" sequenceID="InternalReviewApproved" sequenceSrc="${dynamoCommonEngage}" nextStep="After subflow">
        <initialization />
      </flowStep>
      <flowStep id="Reject" name="Reject" sequenceID="InternalReviewRejected" sequenceSrc="${dynamoCommonEngage}" nextStep="After subflow">
        <initialization />
      </flowStep>
      <step id="After subflow" name="After subflow">
        <logic>
          <cc:choose>
            <cc:when test="${flowStatus == &apos;error&apos;}">
              <fl:start segment="Error" label="Error" />
            </cc:when>
            <cc:when test="${flowStatus == &apos;cancel&apos;}">
              <fl:next label="Cancel" step="View screen" />
            </cc:when>
            <cc:when test="${flowStatus == &apos;exit&apos;}">
              <fl:start label="Exit" segment="End" />
            </cc:when>
            <cc:otherwise>
              <fl:start segment="Init View" label="OK" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Prepare default view" name="Prepare default view" onError="Error">
        <logic>
          <cc:choose>
            <cc:when test="${showExternalComments}">
              <fl:next step="Query external comments" />
            </cc:when>
            <cc:otherwise>
              <cv:set var="externalFeed" value="${&apos;&apos;}" />
              <fl:next step="View screen" label="Show preview" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Prepare compare view" name="Prepare compare view" onError="Error">
        <logic>
          <cc:choose>
            <cc:when test="${not empty prevDoc}">
              <cv:set var="viewMode" value="compare" />
            </cc:when>
            <cc:otherwise>
              <cc:choose>
                <cc:when test="${versionNumber &gt; versionNumberSaved}">
                  <cv:set var="prevVersion" value="${versionNumberSaved}" />
                </cc:when>
                <cc:otherwise>
                  <cv:set var="prevVersion" value="${versionNumberSaved-1}" />
                </cc:otherwise>
              </cc:choose>
              <cc:if test="${prevVersion &lt; 1}">
                <cv:set var="prevVersion" value="1" />
              </cc:if>
              <cc:if test="${debugVersions}">
                <dbg:log level="SEVERE" message="Load previous" />
                <dbg:logVar value="${versionNumberSaved}" />
                <dbg:logVar value="${versionNumber}" />
                <dbg:logVar value="${prevVersion}" />
              </cc:if>
              <soql:query var="prevDoc" select="SELECT Id, VersionNumber FROM ContentVersion where ContentDocument.Id = &apos;${conf.fileHTML}&apos; and VersionNumber = &apos;${prevVersion}&apos;" hideFromDataTab="true" />
              <cc:choose>
                <cc:when test="${not empty prevDoc.Id}">
                  <sffile:load var="prevDoc" recordId="${prevDoc.Id}" hideFromDataTab="true" />
                  <cv:set var="viewMode" value="compare" />
                </cc:when>
                <cc:otherwise>
                  <cv:set var="prevDoc" value="${&apos;&apos;}" hideFromDataTab="true" />
                  <cv:set var="prevVersion" value="0" />
                  <fl:error message="Previous version (${prevVersion}) not found for comparing " />
                </cc:otherwise>
              </cc:choose>
            </cc:otherwise>
          </cc:choose>
          <fl:next step="View screen" />
        </logic>
      </step>
      <step id="Prepare report view" name="Prepare report view">
        <logic>
          <fl:setMessage message="Generating report" />
          <fo:setDateTimeFormat name="HHmm" pattern="HH:mm" />
          <fo:setDateTimeFormat name="ddMMyy" pattern="dd.MM.yy" />
          <cv:set var="prevStatus" value="${dynDocStatus}" />
          <soql:query var="q" select="SELECT dynamo__Document_Status__c FROM dynamo__Dynamo_Document__c where id=&apos;${dynDocId}&apos;" hideFromDataTab="true" />
          <cc:choose>
            <cc:when test="${q.dynamo__Document_Status__c == prevStatus}">
              <sff:relatedList var="allActivity"
                               type="dynamo__Dynamo_Document_Event__c"
                               parentID="${dynDocId}"
                               parentType="dynamo__Dynamo_Document__c"
                               orderBy="CreatedDate desc"
                               fields="CreatedDate, dynamo__Message__c, dynamo__Type__c"
                               data-tag-uuid="ed0e8189-ae03-411a-b29f-b62518996575"
                               hideFromDataTab="true" />
              <fl:composeContent var="reportDoc" editable="false" automaticElementIDs="false" hideFromDataTab="true" template="${doc[&quot;Status Report&quot;]}" />
              <fl:next step="View screen" label="Status not changed" />
            </cc:when>
            <cc:otherwise>
              <fl:setMessage message="Status has changed to ${q.dynamo__Document_Status__c} - Refreshing data" />
              <cv:addMapEntry key="eventID" value="open" map="${param}" />
              <fl:start label="Status changed" segment=":first" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Error" name="Error">
        <logic>
          <fl:start segment="Error" />
        </logic>
      </step>
      <flowStep id="Send email" name="Send email" sequenceID="SendEmail" sequenceSrc="" nextStep="After subflow">
        <initialization />
      </flowStep>
    </steps>
  </standardFlow>
  <standardFlow id="Edit">
    <events>
      <defaultEvent step="Start edit" />
    </events>
    <steps>
      <step id="Start edit" name="Start edit">
        <logic>
          <soql:query var="statusQuery" select="SELECT Id, dynamo__Locked__c, dynamo__Last_Editor__r.Name FROM dynamo__Dynamo_Document__c where Id = &apos;${dynDocId}&apos;" hideFromDataTab="true" />
          <cc:choose>
            <cc:when test="${statusQuery.dynamo__Locked__c}">
              <fl:next label="Locked" step="Document in use" />
            </cc:when>
            <cc:otherwise>
              <sfcrud:update type="dynamo__Dynamo_Document__c">
                <sfcrud:field name="Id" value="${dynDocId}" />
                <sfcrud:field name="dynamo__Locked__c" value="${true}" />
                <sfcrud:field name="dynamo__Last_Editor__c" value="${UserInfo.getUserId()}" />
              </sfcrud:update>
              <cc:choose>
                <cc:when test="${not empty conf.fileHTML}">
                  <fl:next step="Editor" label="Not first version" />
                </cc:when>
                <cc:otherwise>
                  <cc:choose>
                    <cc:when test="${saveZeroVersion and versionNumberSaved == 0}">
                      <!-- Initial version without edits is needed for comparing what has changed during first edit. -->
                      <fl:next step="Save first version" label="Save before edit" />
                    </cc:when>
                    <cc:otherwise>
                      <fl:next step="Editor" label="Directly to editor" />
                    </cc:otherwise>
                  </cc:choose>
                </cc:otherwise>
              </cc:choose>
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <screenStep id="Document in use" name="Document in use" screen="Main/Document in useScreen.html" />
      <flowStep id="Save first version"
                name="Save first version"
                sequenceID="SaveDocument"
                sequenceSrc=""
                nextStep="Editor"
                onError="Error">
        <initialization />
      </flowStep>
      <screenStep id="Editor" name="Editor" screen="Main/EditorScreen.html" onTimeout="Timeout" />
      <step id="Save click" name="Save click">
        <logic>
          <cv:set var="prevDoc" value="${composedDoc}" />
          <cv:set value="${versionNumber}" var="prevVersion" hideFromDataTab="" />
          <cc:if test="${debugVersions}">
            <dbg:log level="SEVERE" message="Save click" />
            <dbg:logVar value="${versionNumberSaved}" />
            <dbg:logVar value="${versionNumber}" />
            <dbg:logVar value="${prevVersion}" />
          </cc:if>
          <fl:next step="Compose" />
        </logic>
      </step>
      <step id="Cancel click" name="Cancel click" message="Closing">
        <logic>
          <sfcrud:update type="dynamo__Dynamo_Document__c">
            <sfcrud:field name="Id" value="${dynDocId}" />
            <sfcrud:field name="dynamo__Locked__c" value="${false}" />
          </sfcrud:update>
          <cv:set var="flowStatus" value="cancel" />
          <fl:start segment="View" step="View screen" />
        </logic>
      </step>
      <step id="Timeout" name="Timeout">
        <logic>
          <cv:set var="timeout" value="true" />
          <fl:next step="Compose" />
        </logic>
      </step>
      <flowStep id="Compose" name="Compose" sequenceID="ComposeDocument" sequenceSrc="" nextStep="Save file">
        <initialization />
      </flowStep>
      <flowStep id="Save file"
                name="Save file"
                sequenceID="SaveDocument"
                sequenceSrc=""
                nextStep="After save"
                step="After compose">
        <initialization />
      </flowStep>
      <step id="After save" name="After save">
        <logic>
          <cc:choose>
            <cc:when test="${timeout}">
              <fl:start segment="End" label="Timeout" />
            </cc:when>
            <cc:when test="${flowStatus == &apos;ok&apos;}">
              <fl:next label="OK" step="OK" />
            </cc:when>
            <cc:otherwise>
              <fl:next label="Error" step="Error" />
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Error" name="Error">
        <logic>
          <cv:set var="flowStatus" value="error" />
          <fl:start segment="Error" />
        </logic>
      </step>
      <step id="OK" name="OK">
        <logic>
          <cv:set var="flowStatus" value="ok" />
          <fl:start segment="Init View" label="Preview" />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="End">
    <events>
      <defaultEvent step="End of workflow" />
    </events>
    <steps>
      <step id="End of workflow" name="End of workflow">
        <logic>
          <fl:finish />
        </logic>
      </step>
    </steps>
  </standardFlow>
  <standardFlow id="Error">
    <events>
      <defaultEvent step="Show error message" />
    </events>
    <steps>
      <screenStep id="Show error message" name="Show error message" screen="Main/Show error messageScreen.html" />
      <step id="Exit" name="Exit">
        <logic>
          <fl:finish />
        </logic>
      </step>
    </steps>
  </standardFlow>
</flowSequence>