
<flowSequence xmlns="http://dynamo.documill.com/schemas/flow"
              xmlns:fl="http://dynamo.documill.com/schemas/taglib/core/flow"
              xmlns:sffile="http://dynamo.documill.com/schemas/taglib/salesforce/file"
              xmlns:cv="http://dynamo.documill.com/schemas/taglib/core/var"
              xmlns:cc="http://dynamo.documill.com/schemas/taglib/core/conditional"
              xmlns:pdf="http://dynamo.documill.com/schemas/taglib/pdf"
              xmlns:sfcrud="http://dynamo.documill.com/schemas/taglib/salesforce/crud"
              id="SavePDF"
              name="Subroutine Flow">
  <startFlow id="Start">
    <events>
      <defaultEvent step="Start save PDF" />
    </events>
    <steps>
      <step id="Start save PDF" name="Start save PDF" onError="Error">
        <logic>
          <cc:choose>
            <cc:when test="${not empty fullPDF}">
              <fl:next step="Save PDF" label="Cached PDF" />
            </cc:when>
            <cc:otherwise>
              <cc:choose>
                <cc:when test="${not empty composedDoc}">
                  <pdf:exportPDF var="fullPDF" document="${composedDoc}" />
                  <fl:next step="Save PDF" label="exported PDF" />
                </cc:when>
                <cc:otherwise>
                  <fl:error message="Can&apos;t create PDF, no document content (empty composedDoc)" />
                </cc:otherwise>
              </cc:choose>
            </cc:otherwise>
          </cc:choose>
        </logic>
      </step>
      <step id="Save PDF" name="Save PDF" onError="Error">
        <logic >
          <cc:choose>
            <cc:when test="${saveToRecord}">
              <sffile:createContentVersion contentDocumentId="${conf.recordFileId}"
                                           doc="${fullPDF}"
                                           linkToId="${id}"
                                           pathOnClient="dynamo/record.pdf"
                                           reasonForChange=""
                                           title="${dynDocName}"
                                           var="storedPDF" />
              <cv:addMapEntry key="recordFileId" map="${conf}" value="${storedPDF.contentDocumentId}" />
              <cv:setBoolean var="saveToRecord" value="false" />
            </cc:when>
            <cc:otherwise>
              <sffile:createContentVersion contentDocumentId="${conf.filePDF}"
                                           doc="${fullPDF}"
                                           linkToId="${dynDocId}"
                                           pathOnClient="dynamo/latest.pdf"
                                           reasonForChange=""
                                           title="${fileName}"
                                           var="storedPDF" />
              <cv:addMapEntry key="filePDF" map="${conf}" value="${storedPDF.contentDocumentId}" />
            </cc:otherwise>
          </cc:choose>
          <fl:next step="Update dynDoc" />
        </logic>
      </step>
      <step id="Update dynDoc" name="Update dynDoc" onError="Error">
        <logic>
          <cv:toJSON value="${conf}" var="confJSON" />
          <sfcrud:update type="dynamo__Dynamo_Document__c">
            <sfcrud:field name="Id" value="${dynDocId}" />
            <sfcrud:field name="dynamo__Configuration_JSON__c" value="${confJSON}" />
          </sfcrud:update>
          <fl:next step="OK" />
        </logic>
      </step>
      <step id="Error" name="Error">
        <logic>
          <cv:set var="flowStatus" value="error" />
        </logic>
      </step>
      <step id="OK" name="OK">
        <logic>
          <cv:set var="flowStatus" value="ok" />
        </logic>
      </step>
    </steps>
  </startFlow>
</flowSequence>